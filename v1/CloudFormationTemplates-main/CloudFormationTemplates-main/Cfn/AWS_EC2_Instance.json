{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloud Formation Demo Stack",
    "Parameters": {
        "CidrBlock": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.10.12.0/24",
            "Description": "VPC CIDR Block (eg 10.0.0.0/16)",
            "Type": "String"
        },
        "pubAvailabilityZone": {
            "Description": "The AvailabilityZone to use for the first subnet",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "pubSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.10.12.0/25",
            "Description": "VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "privAvailabilityZone": {
            "Description": "The AvailabilityZone to use for the second subnet",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "privSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.10.12.128/25",
            "Description": "VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "InstanceName": {
            "Type": "String"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "region-virginia-training-demo-key",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "Environment": {
            "Description": "Application environment for which this network is being created. e.g. Development/Production.",
            "Type": "String",
            "Default": "UAT",
            "AllowedValues": [
                "UAT",
                "DEV",
                "QA",
                "PROD"
            ]
        },
        "InstancePublicIP": {
            "Description": "Specifies whether to launch instances with public IP addresses in your VPC.",
            "Type": "String",
            "Default": "True",
            "AllowedValues": [
                "False",
                "True"
            ]
        },
        "InstanceAMI": {
            "Description": "AMI for use with the EC2 instances",
            "Type": "String",
            "Default": "ami-b63769a1",
            "AllowedValues": [
                "ami-b63769a1",
                "ami-cdbdd7a2"
            ]
        },
        "DBInstanceId": {
            "Description": "The RDS DB Instance Identifier",
            "Type": "String",
            "Default": "rds-mysql-inst01",
            "ConstraintDescription": "Must be a valid RDS instance ID"
        },
        "DBName": {
            "Description": "The RDS DB Instance Name",
            "Type": "String",
            "Default": "wpdb01",
            "ConstraintDescription": "No Special Characters"
        },
        "DBEngine": {
            "Description": "The RDS DB Engine Type",
            "Type": "String",
            "Default": "MySQL",
            "ConstraintDescription": "Must be a valid RDS Engine Type"
        },
        "DBUserName": {
            "Description": "The RDS DB Instance UserName",
            "Type": "String",
            "Default": "dbuser",
            "ConstraintDescription": "No Special Characters"
        },
        "DBUserPass": {
            "Description": "The RDS DB Instance Password",
            "Type": "String",
            "Default": "dbuserpass",
            "ConstraintDescription": "Choose wisely"
        },
        "DBStorage": {
            "Description": "The RDS DB Size in GB",
            "Type": "String",
            "Default": "20",
            "ConstraintDescription": "Storage in GBs"
        },
        "DBInstanceClass": {
            "Description": "The RDS DB Instance Type",
            "Type": "String",
            "Default": "db.t2.micro",
            "ConstraintDescription": "Must be a valid RDS instance Class"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "64": "ami-b63769a1"
            },
            "ap-south-1": {
                "64": "ami-cdbdd7a2"
            }
        }
    },
    "Resources": {
        "myDemoVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "CidrBlock"
                },
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "rtb": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "rtb"
                }
            }
        },
        "pubSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "pubAvailabilityZone"
                },
                "CidrBlock": {
                    "Ref": "pubSubnetCIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    {
                                        "Ref": "pubAvailabilityZone"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "privSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "privAvailabilityZone"
                },
                "CidrBlock": {
                    "Ref": "privSubnetCIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    {
                                        "Ref": "privAvailabilityZone"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "pubSubnetAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb"
                },
                "SubnetId": {
                    "Ref": "pubSubnet"
                }
            }
        },
        "privSubnetAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb"
                },
                "SubnetId": {
                    "Ref": "privSubnet"
                }
            }
        },
        "WebSecGrp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH & HTTPD access via port 22 & 80 respectively",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "DBSecGrp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Frontend Access - Enable EC2 to access RDS(MySQL) access via port 3306",
                "VpcId": {
                    "Ref": "myDemoVPC"
                }
            }
        },
        "DBInboundRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "3306",
                "ToPort": "3306",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "WebSecGrp",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DBSecGrp",
                        "GroupId"
                    ]
                }
            }
        },
        "DBSubnetGrp": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "The RDS DB Instance Identifier",
                "SubnetIds": [
                    {
                        "Ref": "privSubnet"
                    },
                    {
                        "Ref": "pubSubnet"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "RDS",
                                    {
                                        "Ref": "privAvailabilityZone"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "webServer": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        64
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "Monitoring": "true",
                "SubnetId": {
                    "Ref": "pubSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebSecGrp"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -x\nyum install -y httpd php php-mysql mysql-server\nsystemctl start httpd\nsystemctl start mysqld\ngroupadd www\nusermod -a -G www ec2-user\n\n# Download wordpress site & move to http\ncd /var/www/\ncurl -O https://wordpress.org/latest.tar.gz && tar -zxf latest.tar.gz\nrm -rf /var/www/html\nmv wordpress /var/www/html\n\n# Set the permissions\nchown -R root:www /var/www\nchmod 2775 /var/www\nfind /var/www -type d -exec chmod 2775 {} +\nfind /var/www -type f -exec chmod 0664 {} +\n\n# SE Linux permissive\n# needed to make wp connect to DB over newtork\nsetsebool -P httpd_can_network_connect=1\nsetsebool httpd_can_network_connect_db on\n\necho \"<h1> Welcome to Valaxy Cloudformation Demo</h1>\" >> /var/www/html/index.html\n"
                    }
                }
            }
        },
        "webServer2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        64
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "Monitoring": "false",
                "DisableApiTermination": "false",
                "SubnetId": {
                    "Ref": "pubSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebSecGrp"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -x\nyum install -y httpd php php-mysql mysql-server\nsystemctl start httpd\nsystemctl start mysqld\ngroupadd www\nusermod -a -G www ec2-user\n\n# Download wordpress site & move to http\ncd /var/www/\ncurl -O https://wordpress.org/latest.tar.gz && tar -zxf latest.tar.gz\nrm -rf /var/www/html\nmv wordpress /var/www/html\n\n# Set the permissions\nchown -R root:www /var/www\nchmod 2775 /var/www\nfind /var/www -type d -exec chmod 2775 {} +\nfind /var/www -type f -exec chmod 0664 {} +\n\n# SE Linux permissive\n# needed to make wp connect to DB over newtork\nsetsebool -P httpd_can_network_connect=1\nsetsebool httpd_can_network_connect_db on\n\necho \"<h1> Welcome to Valaxy Cloudformation Demo</h1>\" >> /var/www/html/index.html\n"
                    }
                }
            }
        },
        "MyDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "EnableIAMDatabaseAuthentication": "false",
                "DeletionProtection": "false",
                "DBInstanceIdentifier": {
                    "Ref": "DBInstanceID"
                },
                "DBName": {
                    "Ref": "DBName"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "EngineVersion": "8.0.16",
                "MasterUsername": {
                    "Ref": "DBUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MonitoringInterval": "60",
                "PubliclyAccessible": "false",
                "StorageEncrypted": "asdas",
                "AutoMinorVersionUpgrade": "false",
                "MultiAz": "false"
            }
        },
        "MyAthenaWorkGroup": {
            "Type": "AWS::Athena::WorkGroup",
            "Properties": {
                "WorkGroupConfigurationUpdates": {
                    "ResultConfigurationUpdates": {
                        "EncryptionConfiguration": "SSE_KMS"
                    }
                },
                "Name": "MyCustomWorkGroup",
                "Description": "My WorkGroup",
                "State": "ENABLED",
                "Tags": [
                    {
                        "Key": "key1",
                        "Value": "value1"
                    },
                    {
                        "Key": "key2",
                        "Value": "value2"
                    }
                ],
                "WorkGroupConfiguration": {
                    "BytesScannedCutoffPerQuery": 200000000,
                    "EnforceWorkGroupConfiguration": false,
                    "PublishCloudWatchMetricsEnabled": false,
                    "RequesterPaysEnabled": true,
                    "ResultConfiguration": {
                        "OutputLocation": "s3://path/to/my/bucket/"
                    }
                }
            }
        },
        "MyCertificate":{
            "Type":"AWS::CertificateManager::Certificate",
            "Properties":{
               "DomainName":"*.example1212.com",
               "ValidationMethod":"DNS"
            }
         },
         "ElasticacheCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "Port": "63792",
                "AZMode": "cross-az",
                "Engine": "memcached",
                "CacheNodeType": "cache.t2.micro",
                "NumCacheNodes": "1",
                "VpcSecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "ElasticacheSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            }
        },
        "WindowsSelfManagedADFileSystemWithAllConfigs": {
            "Type": "AWS::FSx::FileSystem",
            "Properties": {
                "FileSystemType": "WINDOWS",
                "StorageCapacity": 32,
                "StorageType": "SSD",
                "SubnetIds": [
                    {
                        "Fn::ImportValue": "MySubnet01"
                    },
                    {
                        "Fn::ImportValue": "MySubnet02"
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Fn::ImportValue": "WindowsIngressSecurityGroupId"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "windows"
                    }
                ],
                "WindowsConfiguration": {
                    "ThroughputCapacity": 8,
                    "Aliases": [
                        "financials.corp.example.com"
                    ],
                    "WeeklyMaintenanceStartTime": "4:16:30",
                    "DailyAutomaticBackupStartTime": "01:00",
                    "AutomaticBackupRetentionDays": 30,
                    "CopyTagsToBackups": false,
                    "DeploymentType": "MULTI_AZ_1",
                    "PreferredSubnetId": {
                        "Fn::ImportValue": "MySubnet01"
                    },
                    "SelfManagedActiveDirectoryConfiguration": {
                        "DnsIps": [
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            ",",
                                            {
                                                "Fn::ImportValue": "MySelfManagedADDnsIpAddresses"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "DomainName": {
                            "Fn::ImportValue": "SelfManagedADDomainName"
                        },
                        "FileSystemAdministratorsGroup": "MyDomainAdminGroup",
                        "OrganizationalUnitDistinguishedName": "OU=FileSystems,DC=corp,DC=example,DC=com",
                        "UserName": "Admin",
                        "Password": {
                            "Fn::Join": [
                                ":",
                                [
                                    "{{resolve:secretsmanager",
                                    {
                                        "Fn::ImportValue": "MySelfManagedADCredentialName"
                                    },
                                    "SecretString}}"
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "mydetector": {
            "Type": "AWS::GuardDuty::Detector",
            "Properties": {
                "DataSources": {
                    "Kubernetes": {
                        "AuditLogs": {
                            "Enable": "true"
                        }
                    },
                    "MalwareProtection": {
                        "ScanEc2InstanceWithFindings": {
                            "EbsVolumes": "true"
                        }
                    },
                    "S3Logs": {
                        "Enable": "true"
                    }
                },
                "Enable": true,
                "FindingPublishingFrequency": "FIFTEEN_MINUTES"
            }
        },
        "Macie": {
            "Type": "AWS::Macie::Session",
            "Properties": {
                "FindingPublishingFrequency": "ONE_HOUR",
                "Status": "ENABLED"
            }
        },
        "ComplexBroker": {
            "Type": "AWS::AmazonMQ::Broker",
            "Properties": {
                "AutoMinorVersionUpgrade": "true",
                "BrokerName": "MyComplexActiveBroker",
                "Configuration": {
                    "Id": {
                        "Ref": "Configuration1"
                    },
                    "Revision": {
                        "Fn::GetAtt": [
                            "Configuration1",
                            "Revision"
                        ]
                    }
                },
                "DeploymentMode": "ACTIVE_STANDBY_MULTI_AZ",
                "EngineType": "ACTIVEMQ",
                "Logs": {
                    "Audit": "true",
                    "General": "true"
                },
                "EngineVersion": "5.15.0",
                "HostInstanceType": "mq.t2.micro",
                "MaintenanceWindowStartTime": {
                    "DayOfWeek": "Monday",
                    "TimeOfDay": "22:45",
                    "TimeZone": "America/Los_Angeles"
                },
                "PubliclyAccessible": "false",
                "SecurityGroups": [
                    "sg-a1b234cd",
                    "sg-e5f678gh"
                ],
                "SubnetIds": [
                    "subnet-12a3b45c",
                    "subnet-67d8e90f"
                ],
                "Users": [
                    {
                        "ConsoleAccess": "true",
                        "Password": "AmazonMqPassword",
                        "Username": "AmazonMqUsername"
                    },
                    {
                        "Password": "AmazonMqPassword2",
                        "Username": "AmazonMqUsername2"
                    },
                    {
                        "Groups": [
                            "MyGroup1",
                            "MyGroup2"
                        ],
                        "Password": "AmazonMqPassword3",
                        "Username": "AmazonMqUsername3"
                    }
                ]
            }
        },
        "NeptuneDBCluster": {
            "Type": "AWS::Neptune::DBCluster",
            "Properties": {
                "VpcSecurityGroupIds": [
                    "adaf"
                ],
                "AutoMinorVersionUpgrade": "true",
                "StorageEncrypted": "true",
                "BackupRetentionPeriod": "16"
            }
        }
    },
    "Outputs": {
        "WebServerPublicIPAddress": {
            "Description": "The public IP address of the EC2 Instance.",
            "Value": {
                "Fn::GetAtt": [
                    "webServer",
                    "PublicDnsName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-Public-DNS-Address"
                }
            }
        },
        "RDSEndPoint": {
            "Description": "The RDS Endpoint of MySQL DB",
            "Value": {
                "Fn::GetAtt": [
                    "DBServer",
                    "Endpoint",
                    "Address"
                ]
            }
        }
    }
}
